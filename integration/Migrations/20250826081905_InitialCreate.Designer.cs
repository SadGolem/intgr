// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace integration.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250826081905_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("core")
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("integration.Domain.Entities.Assignee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Assignees", "core");
                });

            modelBuilder.Entity("integration.Domain.Entities.Boss", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Bosses", "core");
                });

            modelBuilder.Entity("integration.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Bik")
                        .HasColumnType("text");

                    b.Property<Guid?>("BossId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConsumerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocTypeName")
                        .HasColumnType("text");

                    b.Property<string>("ExtId")
                        .HasColumnType("text");

                    b.Property<int>("IdAsuPro")
                        .HasColumnType("integer")
                        .HasColumnName("id_asupro");

                    b.Property<string>("Inn")
                        .HasColumnType("text");

                    b.Property<string>("Kpp")
                        .HasColumnType("text");

                    b.Property<string>("MailAddress")
                        .HasColumnType("text");

                    b.Property<string>("Ogrn")
                        .HasColumnType("text");

                    b.Property<string>("PersonId")
                        .HasColumnType("text");

                    b.Property<Guid?>("RootCompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<string>("TypeKa")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BossId");

                    b.HasIndex("IdAsuPro")
                        .IsUnique();

                    b.HasIndex("RootCompanyId");

                    b.ToTable("Clients", "core");
                });

            modelBuilder.Entity("integration.Domain.Entities.Container", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CapacityId")
                        .HasColumnType("integer");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Containers", "core");
                });

            modelBuilder.Entity("integration.Domain.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContractTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RootId")
                        .HasColumnType("text");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("Contracts", "core");
                });

            modelBuilder.Entity("integration.Domain.Entities.ContractPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmitterId")
                        .HasColumnType("uuid");

                    b.Property<double?>("EstimationValue")
                        .HasColumnType("double precision");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.Property<double?>("ValueManual")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("EmitterId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("StatusId");

                    b.ToTable("ContractPositions", "core");
                });

            modelBuilder.Entity("integration.Domain.Entities.Emitter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Amount")
                        .HasColumnType("text");

                    b.Property<string>("ContractNumber")
                        .HasColumnType("text");

                    b.Property<string>("ContractStatus")
                        .HasColumnType("text");

                    b.Property<string>("ExecutorName")
                        .HasColumnType("text");

                    b.Property<string>("IdConsumer")
                        .HasColumnType("text");

                    b.Property<int>("IdContract")
                        .HasColumnType("integer");

                    b.Property<string>("LocationMtId")
                        .HasColumnType("text");

                    b.Property<string>("NameConsumer")
                        .HasColumnType("text");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<string>("TypeConsumer")
                        .HasColumnType("text");

                    b.Property<Guid>("WasteSourceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WasteSourceId");

                    b.ToTable("Emitters", "core");
                });

            modelBuilder.Entity("integration.Domain.Entities.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AgreementId")
                        .HasColumnType("integer");

                    b.Property<string>("AuthorName")
                        .HasColumnType("text");

                    b.Property<int>("BtNumber")
                        .HasColumnType("integer");

                    b.Property<int>("CapacityId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<Guid?>("ContractPositionId")
                        .HasColumnType("uuid");

                    b.Property<int?>("IdContainerType")
                        .HasColumnType("integer");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PlanDateRo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("StatusString")
                        .HasColumnType("text");

                    b.Property<float?>("Volume")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ContractPositionId");

                    b.HasIndex("LocationId");

                    b.ToTable("Entries", "core");
                });

            modelBuilder.Entity("integration.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AuthorUpdate")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Lat")
                        .HasColumnType("numeric(9,6)");

                    b.Property<decimal>("Lon")
                        .HasColumnType("numeric(9,6)");

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("ParticipantId");

                    b.HasIndex("StatusId");

                    b.ToTable("Locations", "core");
                });

            modelBuilder.Entity("integration.Domain.Entities.RootCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RootCompanies", "core");
                });

            modelBuilder.Entity("integration.Domain.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string[]>("Dates")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("EmitterId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExtId")
                        .HasColumnType("text");

                    b.Property<string>("GrW")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("IdContainerType")
                        .HasColumnType("integer");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmitterId");

                    b.HasIndex("LocationId");

                    b.ToTable("Schedules", "core");
                });

            modelBuilder.Entity("integration.Domain.Entities.Staging.AproSnapshot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now()) + interval '10 days'");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ReceivedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Hash");

                    b.HasIndex("Entity", "ExternalId");

                    b.ToTable("apro_snapshots", "stg");
                });

            modelBuilder.Entity("integration.Domain.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId", "EntityType")
                        .IsUnique();

                    b.ToTable("Statuses", "core");
                });

            modelBuilder.Entity("integration.Domain.Entities.WasteSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Normative")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("WasteSources", "core");
                });

            modelBuilder.Entity("integration.Domain.Entities.WasteSourceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WasteSourceCategories", "core");
                });

            modelBuilder.Entity("integration.Domain.Entities.Client", b =>
                {
                    b.HasOne("integration.Domain.Entities.Boss", "Boss")
                        .WithMany("Clients")
                        .HasForeignKey("BossId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("integration.Domain.Entities.RootCompany", "RootCompany")
                        .WithMany("Clients")
                        .HasForeignKey("RootCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Boss");

                    b.Navigation("RootCompany");
                });

            modelBuilder.Entity("integration.Domain.Entities.Container", b =>
                {
                    b.HasOne("integration.Domain.Entities.Schedule", "Schedule")
                        .WithMany("Containers")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("integration.Domain.Entities.Contract", b =>
                {
                    b.HasOne("integration.Domain.Entities.Assignee", "Assignee")
                        .WithMany("Contracts")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("integration.Domain.Entities.Client", "Client")
                        .WithMany("Contracts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("integration.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Client");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("integration.Domain.Entities.ContractPosition", b =>
                {
                    b.HasOne("integration.Domain.Entities.Contract", "Contract")
                        .WithMany("Positions")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("integration.Domain.Entities.Emitter", "Emitter")
                        .WithMany("ContractPositions")
                        .HasForeignKey("EmitterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("integration.Domain.Entities.Location", "Location")
                        .WithMany("ContractPositions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("integration.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Emitter");

                    b.Navigation("Location");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("integration.Domain.Entities.Emitter", b =>
                {
                    b.HasOne("integration.Domain.Entities.WasteSource", "WasteSource")
                        .WithMany("Emitters")
                        .HasForeignKey("WasteSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WasteSource");
                });

            modelBuilder.Entity("integration.Domain.Entities.Entry", b =>
                {
                    b.HasOne("integration.Domain.Entities.ContractPosition", null)
                        .WithMany("Entries")
                        .HasForeignKey("ContractPositionId");

                    b.HasOne("integration.Domain.Entities.Location", "Location")
                        .WithMany("Entries")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("integration.Domain.Entities.Location", b =>
                {
                    b.HasOne("integration.Domain.Entities.Client", "Client")
                        .WithMany("CustomerLocations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("integration.Domain.Entities.Client", "Participant")
                        .WithMany("ParticipantLocations")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("integration.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Participant");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("integration.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("integration.Domain.Entities.Emitter", "Emitter")
                        .WithMany("Schedules")
                        .HasForeignKey("EmitterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("integration.Domain.Entities.Location", "Location")
                        .WithMany("Schedules")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emitter");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("integration.Domain.Entities.WasteSource", b =>
                {
                    b.HasOne("integration.Domain.Entities.WasteSourceCategory", "Category")
                        .WithMany("WasteSources")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("integration.Domain.Entities.Assignee", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("integration.Domain.Entities.Boss", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("integration.Domain.Entities.Client", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("CustomerLocations");

                    b.Navigation("ParticipantLocations");
                });

            modelBuilder.Entity("integration.Domain.Entities.Contract", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("integration.Domain.Entities.ContractPosition", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("integration.Domain.Entities.Emitter", b =>
                {
                    b.Navigation("ContractPositions");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("integration.Domain.Entities.Location", b =>
                {
                    b.Navigation("ContractPositions");

                    b.Navigation("Entries");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("integration.Domain.Entities.RootCompany", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("integration.Domain.Entities.Schedule", b =>
                {
                    b.Navigation("Containers");
                });

            modelBuilder.Entity("integration.Domain.Entities.WasteSource", b =>
                {
                    b.Navigation("Emitters");
                });

            modelBuilder.Entity("integration.Domain.Entities.WasteSourceCategory", b =>
                {
                    b.Navigation("WasteSources");
                });
#pragma warning restore 612, 618
        }
    }
}
